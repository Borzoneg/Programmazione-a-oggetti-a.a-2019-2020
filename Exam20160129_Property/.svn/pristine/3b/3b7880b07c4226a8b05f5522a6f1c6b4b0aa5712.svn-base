package managingProperties;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;

public class PropertyManager {

    	private Map<String, Building> buildings = new HashMap<>();
    	private Map<String, Owner> owners = new HashMap<>();
    	private ArrayList<Apartement> apartements = new ArrayList<>();
	/**
	 * Add a new building 
	 */
	public void addBuilding(String building, int n) throws PropertyException {
	    if(n > 100 || n < 1)
		throw new PropertyException(n + " non valido");
	    if(buildings.containsKey(building))
		throw new PropertyException(building + " già inserito");
	    
	    Building b = new Building(building, n);
	    buildings.put(building, b);
	}

	public void addOwner(String owner, String... apartments) throws PropertyException {
		if(owners.containsKey(owner))
		    throw new PropertyException(owner + " già inserito");
		Owner o = new Owner(owner);
		for(String s : apartments) {
		    String fields[] = s.split(":");
		    if(! buildings.containsKey(fields[0]))
			throw new PropertyException(fields[0] + " non definito");
		    if(Integer.valueOf(fields[1]) > buildings.get(fields[0]).getNApartement() || Integer.valueOf(fields[1]) < 1)
			throw new PropertyException(fields[1] + " non valido");
		    if(buildings.get(fields[0]).ownerOf(Integer.valueOf(fields[1])) != null)
			throw new PropertyException(fields[1] + " già occupato");
		    
		    buildings.get(fields[0]).setOwner(o, Integer.valueOf(fields[1]));
		    o.addApartement(s);
		}
		
	}	

	/**
	 * Returns a map ( number of apartments => list of buildings ) 
	 * 
	 */
	public SortedMap<Integer, List<String>> getBuildings() {
	    SortedMap<Integer, List<String>> result = new TreeMap<>();
		buildings.
		values().
		stream().
		forEach(b -> {
		    if(! result.containsKey(b.getNApartement())) {
			List<String> tmpMap = new ArrayList<>();
			tmpMap.add(b.getName());
			result.put(b.getNApartement(), tmpMap);
		    }
		    else {
			List<String> tmpMap = result.get(b.getNApartement());
			tmpMap.add(b.getName());
			tmpMap.sort((s1, s2) -> s1.compareTo(s2));
			result.put(b.getNApartement(), tmpMap);			
		    }
		});
		return result;
	}

	public void addProfessionals(String profession, String... professionals) throws PropertyException {
				
	}

	/**
	 * Returns a map ( profession => number of workers )
	 *
	 */
	public SortedMap<String, Integer> getProfessions() {
		
		return null;
	}

	public int addRequest(String owner, String apartment, String profession) throws PropertyException {
		
		return 0;
	}

	public void assign(int requestN, String professional) throws PropertyException {
		
		
	}

	public List<Integer> getAssignedRequests() {
		
		return null;
	}

	
	public void charge(int requestN, int amount) throws PropertyException {
		
		
	}

	/**
	 * Returns the list of request ids
	 * 
	 */
	public List<Integer> getCompletedRequests() {
		
		return null;
	}
	
	/**
	 * Returns a map ( owner => total expenses )
	 * 
	 */
	public SortedMap<String, Integer> getCharges() {
		
		return null;
	}

	/**
	 * Returns the map ( building => ( profession => total expenses) ).
	 * Both buildings and professions are sorted alphabetically
	 * 
	 */
	public SortedMap<String, Map<String, Integer>> getChargesOfBuildings() {
		
		return null;
	}

}
