package warehouse;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;

public class Warehouse {

    private Map<String, Product> products = new TreeMap<>();
    private Map<String, Supplier> suppliers = new TreeMap<>();
    private Map<String, Order> orders = new TreeMap<>();

    public Product newProduct(String code, String description){
	Product p  = new Product(code, description);
	products.put(code, p);
	return p;
    }

    public Collection<Product> products(){
	return products.values();
    }

    public Product findProduct(String code){
	return products.get(code);
    }

    public Supplier newSupplier(String code, String name){
	Supplier s = new Supplier(code, name);
	suppliers.put(code, s);
	return s;
    }

    public Supplier findSupplier(String code){
	return suppliers.get(code);
    }

    public Order issueOrder(Product prod, int quantity, Supplier supp) throws InvalidSupplier {
	if(!prod.suppliedBy(supp))
	    throw new InvalidSupplier();
	
	String code =  "ORD" + String.valueOf(orders.size() +1);
	Order o = new Order(prod, quantity, supp, code);
	orders.put(code, o);
	prod.newOrder(o);
	return o;
    }

    public Order findOrder(String code){
	return orders.get(code);
    }

    public List<Order> pendingOrders(){
	return orders.values().stream().filter(o -> ! o.delivered()).collect(Collectors.toList());
    }

    public Map<String,List<Order>> ordersByProduct(){
	return null;
    }

    public Map<String,Long> orderNBySupplier(){
	return null;
    }

    public List<String> countDeliveredByProduct(){
	return null;
    }
}
