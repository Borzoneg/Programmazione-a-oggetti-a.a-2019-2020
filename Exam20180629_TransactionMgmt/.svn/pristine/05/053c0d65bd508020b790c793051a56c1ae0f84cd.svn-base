package transactions;
import java.util.*;
import java.util.stream.Collectors;

//import static java.util.stream.Collectors.*;
//import static java.util.Comparator.*;

public class TransactionManager {

    private Map<String, Region> regions = new HashMap<>();
    private Map<String, Carrier> carriers = new HashMap<>();
    private Map<String, Region> places = new HashMap<>();
    private Map<String, Order> requests = new HashMap<>();
    private Map<String, Offer> offers = new HashMap<>();
    private Map<String, Transaction> transactions = new HashMap<>();

    //R1
    public List<String> addRegion(String regionName, String... placeNames) { 
	Region r = new Region(regionName);
	for(String s : placeNames) {
	    if(! places.containsKey(s)) {
		places.put(s, r);
		r.addPlace(s);
	    }
	}
	regions.put(regionName, r);
	return r.getPlaces().stream().collect(Collectors.toList());
    }

    public List<String> addCarrier(String carrierName, String... regionNames) { 
	Carrier c = new Carrier(carrierName);
	for(String s : regionNames) {
	    if(regions.containsKey(s)) {
		regions.get(s).addCarrier(c);
		c.addRegion(regions.get(s));
	    }
	}
	carriers.put(carrierName, c);
	return c.getRegions().stream().map(r -> r.getName()).collect(Collectors.toList());
    }

    public List<String> getCarriersForRegion(String regionName) { 
	return regions.get(regionName).getCarriers().stream().map(c -> c.getName()).collect(Collectors.toList());
    }

    //R2
    public void addRequest(String requestId, String placeName, String productId) throws TMException {
	if(requests.containsKey(requestId))
	    throw new TMException();
	if(! places.containsKey(placeName))
	    throw new TMException();
	Order o = new Order(requestId, placeName, productId);
	requests.put(requestId, o);
    }

    public void addOffer(String offerId, String placeName, String productId) throws TMException {
	if(offers.containsKey(offerId))
	    throw new TMException();
	if(! places.containsKey(placeName))
	    throw new TMException();
	Offer o = new Offer(offerId, placeName, productId);
	offers.put(offerId, o);
    }


    //R3
    public void addTransaction(String transactionId, String carrierName, String requestId, String offerId) throws TMException {
	for(Transaction t : transactions.values()) {
	    if(t.getOffer().getId().equals(offerId) || t.getOrder().getId().equals(requestId))
		throw new TMException();
	}
	if(! requests.get(requestId).getProductId().equals(offers.get(offerId).getProductId()))
	    throw new TMException();
	if(! carriers.get(carrierName).getRegions().contains(places.get(offers.get(offerId).getPlaceName()))||
	   ! carriers.get(carrierName).getRegions().contains(places.get(requests.get(requestId).getPlaceName())))
	    throw new TMException();
	Transaction t = new Transaction(requests.get(requestId), carriers.get(carrierName), offers.get(offerId), transactionId);
	transactions.put(transactionId, t);
	requests.get(requestId).setTransaction(t);
	offers.get(offerId).setTransaction(t);
    }

    public boolean evaluateTransaction(String transactionId, int score) {
	transactions.get(transactionId).evaluate(score);
	if(score < 0 || score > 10)
	    return false;
	return true;
    }

    //R4
    public SortedMap<Long, List<String>> deliveryRegionsPerNT() {
	return new TreeMap<Long, List<String>>();
    }

    public SortedMap<String, Integer> scorePerCarrier(int minimumScore) {
	return new TreeMap<String, Integer>();
    }

    public SortedMap<String, Long> nTPerProduct() {
	return new TreeMap<String, Long>();
    }


}

