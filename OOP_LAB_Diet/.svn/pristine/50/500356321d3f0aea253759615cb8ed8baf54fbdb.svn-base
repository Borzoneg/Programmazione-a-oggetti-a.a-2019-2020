package diet;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

/**
 * Represents an order in the take-away system
 */
public class Order {

    private User user;
    private Restaurant restaurant;
    private int hour;
    private int min;
    private Map <String, Integer> menus = new TreeMap<String, Integer>();
    private double price;
    private PaymentMethod payMeth;
    private OrderStatus status;
    /**
     * Defines the possible order status
     */
    public enum OrderStatus {
	ORDERED, READY, DELIVERED;
    }
    /**
     * Defines the possible valid payment methods
     */
    public enum PaymentMethod {
	PAID, CASH, CARD;
    }

    public Order(User user, Restaurant restaurant, int h, int m) {
	this.user = user;
	this.restaurant = restaurant;
	Integer[] time = restaurant.adjustTime(h, m);
	hour = time[0]; 
	min = time[1];
	payMeth = PaymentMethod.CASH;
	status = OrderStatus.ORDERED;
    }

    /**
     * Total order price
     * @return order price
     */
    public double Price() {
	return price;
    }

    /**
     * define payment method
     * 
     * @param method payment method
     */
    public void setPaymentMethod(PaymentMethod method) {
	switch(method) {
	case PAID:
	    payMeth = PaymentMethod.PAID;
	    break;
	case CASH:
	    payMeth = PaymentMethod.CASH;
	    break;
	case CARD:
	    payMeth = PaymentMethod.CARD;
	    break;
	}
    }

    /**
     * get payment method
     * 
     * @return payment method
     */
    public PaymentMethod getPaymentMethod() {
	return payMeth;
    }

    /**
     * change order status
     * @param newStatus order status
     */
    public void setStatus(OrderStatus newStatus) {
	switch(newStatus) {
	case ORDERED:
	    status = OrderStatus.ORDERED;
	    break;
	case READY:
	    status = OrderStatus.READY;
	    break;
	case DELIVERED:
	    status = OrderStatus.DELIVERED;
	    break;
	}
    }

    /**
     * get current order status
     * @return order status
     */
    public OrderStatus getStatus(){
	return status;
    }

    /**
     * Add a new menu with the relative order to the order.
     * The menu must be defined in the {@link Food} object
     * associated the restaurant that created the order.
     * 
     * @param menu     name of the menu
     * @param quantity quantity of the menu
     * @return this order to enable method chaining
     */
    public Order addMenus(String menu, int quantity) {
	menus.put(menu, quantity);
	return this;
    }

    /**
     * Converts to a string as:
     * <pre>
     * RESTAURANT_NAME, USER_FIRST_NAME USER_LAST_NAME : DELIVERY(HH:MM):
     * 	MENU_NAME_1->MENU_QUANTITY_1
     * 	...
     * 	MENU_NAME_k->MENU_QUANTITY_k
     * </pre>
     */

    //    RESTAURANT_NAME, USER_FIRST_NAME USER_LAST_NAME : DELIVERY(HH:MM):
    //	MENU_NAME_1->MENU_QUANTITY_1
    //	...
    //	MENU_NAME_k->MENU_QUANTITY_k

    @Override
    public String toString() {
	StringBuffer buf = new StringBuffer();
	buf.append(String.format("%s, %s %s : (%02d:%02d):\n", restaurant.getName(), user.getFirstName(), user.getLastName(), hour, min));
	menus.forEach((k, v) -> buf.append(String.format("\t%s->%d\n", k, v)));
	String str = buf.toString();
	return str.substring(0, str.length()-1);
    }

}
