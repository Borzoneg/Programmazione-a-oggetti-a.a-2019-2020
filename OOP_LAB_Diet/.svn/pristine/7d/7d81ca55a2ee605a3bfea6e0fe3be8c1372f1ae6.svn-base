package diet;
import java.util.ArrayList;
import java.util.SortedSet;
import java.util.TreeSet;

import diet.Order.OrderStatus;

/**
 * Represents a restaurant in the take-away system
 *
 */
public class Restaurant {

    private String name;
    private Food food;
    private ArrayList<String> openingHours = new ArrayList<>();
    private ArrayList<String> closingHours = new ArrayList<>();
    private ArrayList<Menu> menus = new ArrayList<>();
    SortedSet<Order> orders = new TreeSet<>((o1, o2) -> o1.toString().compareTo(o2.toString()));

    /**
     * Constructor for a new restaurant.
     * 
     * Materials and recipes are taken from
     * the food object provided as argument.
     * 
     * @param name	unique name for the restaurant
     * @param food	reference food object
     */
    public Restaurant(String name, Food food) {
	this.name = name;
	this.food = food;
    }

    /**
     * gets the name of the restaurant
     * 
     * @return name
     */
    public String getName() {
	return name;
    }

    /**
     * Define opening hours.
     * 
     * The opening hours are considered in pairs.
     * Each pair has the initial time and the final time
     * of opening intervals.
     * 
     * for a restaurant opened from 8:15 until 14:00 and from 19:00 until 00:00, 
     * is thoud be called as {@code setHours("08:15", "14:00", "19:00", "00:00")}.
     * 
     * @param hm a list of opening hours
     */
    public void setHours(String ... hm) {
	int i;
	for(i=0; i< hm.length; i+=2) {
	    openingHours.add(hm[i]);
	    closingHours.add(hm[i+1]);
	}
    }

    public Menu getMenu(String name) {
	for(Menu m : menus) {
	    if(m.getName().equals(name))
		return m;
	}
	return null;
    }

    /**
     * Creates a new menu
     * 
     * @param name name of the menu
     * 
     * @return the newly created menu
     */
    public Menu createMenu(String name) {
	Menu menu = new Menu(name, food);
	menus.add(menu);
	return menu;
    }

    /**
     * Find all orders for this restaurant with 
     * the given status.
     * 
     * The output is a string formatted as:
     * <pre>
     * Napoli, Judi Dench : (19:00):
     * 	M6->1
     * Napoli, Ralph Fiennes : (19:00):
     * 	M1->2
     * 	M6->1
     * </pre>
     * 
     * The orders are sorted by name of restaurant, name of the user, and delivery time.
     * 
     * @param status the status of the searched orders
     * 
     * @return the description of orders satisfying the criterion
     */
    public String ordersWithStatus(OrderStatus status) {
	StringBuffer buf = new StringBuffer(); 
	for(Order o : orders) {
	    if(o.getStatus() == status)
		buf.append(o.toString() + "\n");
	}
	return buf.toString();
    }

    /**
     * Check if the restaurant is open in the given time, if is not return an array {hour, min} with the right time    	
     * @param requestedH
     * @param requestedMin
     * @return
     */
    Integer[] adjustTime(int requestedH, int requestedMin) {
	int hour, min, i;
	String[] splitted;
	if(this.isOpen(requestedH, requestedMin))
	    return new Integer[] {requestedH, requestedMin};
	for(i=0; i<closingHours.size(); i++) {
	    splitted = closingHours.get(i).split(":");
	    hour = Integer.valueOf(splitted[0]);
	    min = Integer.valueOf(splitted[1]);
	    if(hour > requestedH || (hour == requestedH && min > requestedMin)) { 
		splitted = openingHours.get(i).split(":");
		return new Integer[] {Integer.valueOf(splitted[0]), min = Integer.valueOf(splitted[1])};
	    }
	}
	return null;
    }

    /**
     * Give a boolean checking if the restaurant is open or not
     * @param requestedH
     * @param requestedMin
     * @return
     */
    public boolean isOpen(int requestedH, int requestedMin) {
	int hour, min, i;
	String[] splitted;
	for(i=0; i<openingHours.size(); i++) {
	    splitted = openingHours.get(i).split(":");
	    hour = Integer.valueOf(splitted[0]);
	    min = Integer.valueOf(splitted[1]);
	    if(hour < requestedH || (hour == requestedH && min <= requestedMin)) { // we're in the opening time, we have to check if we're in the closing time also
		splitted = closingHours.get(i).split(":");
		hour = Integer.valueOf(splitted[0]);
		min = Integer.valueOf(splitted[1]);
		if(hour > requestedH || (hour == requestedH && min >= requestedMin)) // we're in the closing time so the restaurant is open
		    return true;
	    }
	}
	return false;
    }

    /**
     * Add order to the list
     */
    public void addOrder(Order order) {
	orders.add(order);	
    }
}
