package diet;

import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Represents a recipe of the diet.
 * 
 * A recipe consists of a a set of ingredients that are given amounts of raw materials.
 * The overall nutritional values of a recipe can be computed
 * on the basis of the ingredients' values and are expressed per 100g
 * 
 *
 */
public class Recipe implements NutritionalElement {

    private String name;
    private Map<String, NutritionalElement> rawMaterialsMap;
    private double calories;
    private double proteins;
    private double carbs;
    private double fat;
    private double totalWeight = 0;
    private Map<String, Double> ingredients =  new LinkedHashMap<>();


    public Recipe(String name, Map<String, NutritionalElement> rawMaterialsMap) {
	this.name = name;
	this.rawMaterialsMap = rawMaterialsMap;
    }


    /**
     * Adds a given quantity of an ingredient to the recipe.
     * The ingredient is a raw material.
     * 
     * @param material the name of the raw material to be used as ingredient
     * @param quantity the amount in grams of the raw material to be used
     * @return the same Recipe object, it allows method chaining.
     */
    public Recipe addIngredient(String material, double quantity) {
	ingredients.put(material, quantity);
	totalWeight += quantity;
	this.calcNutrValues();
	return this;
    }


    public void calcNutrValues() {
	double factor;
	calories = 0;
	proteins = 0;
	carbs = 0;
	fat = 0;
	for(String s : ingredients.keySet()) { // for each ingredients update the energetic values	 
	    NutritionalElement food = rawMaterialsMap.get(s); // get the rawElement from the list of viables to have the energetic values of each ingredient
	    factor = ingredients.get(s) / 100; // in case the quantity of the material is different from 100g we have to do a proportion with energetic values 
	    calories += food.getCalories() * factor ;	
	    proteins += food.getProteins() * factor;
	    carbs += food.getCarbs() * factor;
	    fat += food.getFat() * factor;	
	}
	factor = 100 / totalWeight; // correct the values in case the recipe is defined for more then 100g
	calories *= factor;
	proteins *= factor;
	carbs *= factor;
	fat *= factor;
    }


    @Override
    public String getName() {
	return name;
    }


    @Override
    public double getCalories() {
	return calories;
    }


    @Override
    public double getProteins() {
	return proteins;
    }


    @Override
    public double getCarbs() {
	return carbs;
    }


    @Override
    public double getFat() {
	return fat;
    }


    /**
     * Indicates whether the nutritional values returned by the other methods
     * refer to a conventional 100g quantity of nutritional element,
     * or to a unit of element.
     * 
     * For the {@link Recipe} class it must always return {@code true}:
     * a recipe expresses nutritional values per 100g
     * 
     * @return boolean indicator
     */
    @Override
    public boolean per100g() {
	return true;
    }


    /**
     * Returns the ingredients composing the recipe.
     * 
     * A string that contains all the ingredients, one per per line, 
     * using the following format:
     * {@code "Material : ###.#"} where <i>Material</i> is the name of the 
     * raw material and <i>###.#</i> is the relative quantity. 
     * 
     * Lines are all terminated with character {@code '\n'} and the ingredients 
     * must appear in the same order they have been added to the recipe.
     */
    @Override
    public String toString() {
	StringBuffer buf = new StringBuffer();
	for(String s : ingredients.keySet()) {
	    buf.append(s + ": " + ingredients.get(s) + "\n");
	}
	return buf.toString();
    }
}
