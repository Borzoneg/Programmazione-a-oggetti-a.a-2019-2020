package hydraulic;

/**
 * Represents a split element, a.k.a. T element
 * 
 * During the simulation each downstream element will
 * receive a stream that is half the input stream of the split.
 */

public class Split extends ElementExt {

	public Element outputElement2;
	/**
	 * Constructor
	 * @param name
	 */
	public Split(String name) {
		super(name);
		type = "Split";
	}
	
    
	/**
	 * returns the downstream elements
	 * @return array containing the two downstream element
	 */
    public Element[] getOutputs(){
    	Element[] elements = {outputElement, outputElement2};
        return elements;
    }
    

    /**
     * connect one of the outputs of this split to a
     * downstream component.
     * 
     * @param elem  the element to be connected downstream
     * @param noutput the output number to be used to connect the element
     */
	public void connect(Element elem, int noutput){
		if(noutput == 0)
			outputElement = elem;
		else
			outputElement2 = elem;
	}
	

	/** 
	 *  the method connect is overwritten in split so the normal connect should do nothing 
	 */
	@Override
	public void connect(Element elem) {
		System.out.println("Missing a paramether");
	}
	
	
	/**
	 * update method for split element, it sets the input stream of the two elements connected to half the input of the split or to full
	 */
	@Override
	public void update(SimulationObserver observer, boolean enableMaxFlowCheck) {
		outputFlow = inputFlow/2;
		if(enableMaxFlowCheck) {
		    if(inputFlow > maxFlow)
			((SimulationObserverExt) observer).notifyFlowError(type, name, inputFlow, maxFlow);
		}
		observer.notifyFlow(type, name, inputFlow, outputFlow, outputFlow);
		if(outputElement != null && outputElement2 != null) {
			outputElement.setInputFlow(outputFlow);
			outputElement2.setInputFlow(outputFlow);
			outputElement.update(observer, enableMaxFlowCheck);
			outputElement2.update(observer, enableMaxFlowCheck);
		}	
	}
	
	
	/**
	 * Create the layout of the single element and attach the layouts of its outputs to it
	 */
	@Override
	public String cascadeLayout(int length) {
	    String str = "";
	    int i, partialLength;
	    str += String.format("[%s]%s", name, type);
	    length += str.length();
	    if(outputElement != null && outputElement2 != null) {
		str += " +-> ";
		str += outputElement.cascadeLayout(length + str.length());
		partialLength = str.length();
		str += "\n";
		for(i=0; i<length; i++) str += " ";
		str += " +-> ";
		str += outputElement.cascadeLayout(length + partialLength);		
	    }
	    else 
		str += " *";
	    return str;	
	}
}
