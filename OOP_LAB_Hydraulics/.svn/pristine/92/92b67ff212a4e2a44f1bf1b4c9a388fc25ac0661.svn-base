package hydraulic;

/**
 * Represents a split element, a.k.a. T element
 * 
 * During the simulation each downstream element will
 * receive a stream that is half the input stream of the split.
 */

public class Split extends ElementExt {

	public Element outputElement2;
	/**
	 * Constructor
	 * @param name
	 */
	public Split(String name) {
		super(name);
		type = "Split";
	}
	
	
	
	/**
	 * @Return a string representation of the element	
	 */
	@Override
	public String toString() {
		return super.toString() + "2nd output: " + outputElement2.getName() + "\n";
	}
    
	
	/**
	 * returns the downstream elements
	 * @return array containing the two downstream element
	 */
    public Element[] getOutputs(){
    	Element[] elements = {outputElement, outputElement2};
        return elements;
    }
    

    /**
     * connect one of the outputs of this split to a
     * downstream component.
     * 
     * @param elem  the element to be connected downstream
     * @param noutput the output number to be used to connect the element
     */
	public void connect(Element elem, int noutput){
		if(noutput == 0)
			outputElement = elem;
		else
			outputElement2 = elem;
	}
	

	/** 
	 *  the method connect is overwritten in split so the normal connect should do nothing 
	 */
	@Override
	public void connect(Element elem) {
		System.out.println("Missing a paramether");
	}
	
	
	/**
	 * update method for split element, it sets the input stream of the two elements connected to half the input of the split or to full
	 */
	@Override
	public void update(SimulationObserver observer) {
		outputFlow = inputFlow;
		observer.notifyFlow(type, name, inputFlow, outputFlow/2, outputFlow/2);
		if(outputElement != null && outputElement2 != null) {
			outputElement.setInputFlow(outputFlow / 2);
			outputElement2.setInputFlow(outputFlow / 2);
			outputElement.update(observer);
			outputElement2.update(observer);
		}	
	}
}
